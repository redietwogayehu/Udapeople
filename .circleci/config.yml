version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
    notify_on_failure:
        steps:
        - slack/notify:
            event: fail
            channel: cicd-pipeline
            template: basic_fail_1

    install_awscli:
       description: Install AWS CLI v2
       steps:
          - run:
              name: Install AWS CLI v2
              command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
    install_ansible:
      description: Install Ansible
      steps:
        - run:
             name: Install Ansible
             command: |
                python3 -m pip install --user ansible
    

    
jobs:

  notify_on_success:
        docker:
        - image: cimg/base:stable
        steps:
        - slack/notify:
            event: pass
            channel: cicd-pipeline
            template: success_tagged_deployment_1
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "TIER/package-lock.json" }}
      

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - save_cache:
            paths: [backend/node_modules]
            key: backend-deps
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Run frontend unit tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
        # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Run backend unit tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Scan frontend packages
          command: |
            cd frontend
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}

      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Scan backend packages
          command: |
            cd backend
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure
      
  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
              echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
           - project/.circleci/ansible/inventory.txt



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - notify_on_success:
          requires: [build-backend]
          
    
